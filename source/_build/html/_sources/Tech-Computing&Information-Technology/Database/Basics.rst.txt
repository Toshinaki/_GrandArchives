
Database Bascis
===============

Introduction
-------------

数据库系统概述
~~~~~~~~~~~~~~~~~~

数据库的4个基本概念
^^^^^^^^^^^^^^^^^^^^^^^^

- 数据 Data
    数据是描述事物的数字化符号记录, 是数据库存储的基本对象

    数据的含义由其语义决定 (同样的数字在不同语义下可以表示不同的含义)

- 数据库 Database
    是 **长期储存** 在计算机内, **有组织**, **可共享** 的大量数据的集合

- 数据库管理系统 DBMS
    Database Management System

    DBMS是位于用户与操作系统之间的一层数据管理 *软件*, 用于科学地组织和存储数据, 高效地获取和维护数据

    主要功能
        - 提供数据定义语言 (Data Definition Language, DDL)
        - 数据组织, 存储和管理
        - 提供数据操纵语言 (Data Manipulation Language, DML)
            
            查询、插入、删除和修改

        - 数据库的事务管理和运行管理
            
            保证数据的安全性, 完整性, 多用户对数据的并发使用
            
            发生故障后的系统恢复
        
        - 数据库的建立, 运行和维护
        - 等等...

- 数据库系统 DBS
    Database System

    由数据库, 数据库管理系统 (及其应用开发工具), 应用程序, 数据库管理员 (Administrator, DBA) 构成

    .. image:: imgs/DBS.png

数据管理的三个阶段
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. list-table::
    :widths: 5 15 20 20 25
    :header-rows: 1
    :stub-columns: 2
    
    * - 
      - 
      - 人工管理阶段
      - 文件系统阶段
      - 数据库系统阶段
    * - 背景
      - 应用背景
      - 科学计算
      - 科学计算, 数据管理
      - 大规模数据管理
    * -
      - 硬件背景
      - 无直接存取存储设备
      - 磁盘等
      - 大容量磁盘, 磁盘阵列
    * -
      - 软件背景
      - 没有操作系统
      - 有文件系统
      - 有数据库管理系统
    * -
      - 处理方式
      - 批处理
      - 联机实时处理, 批处理
      - 联机实时处理, 分布处理, 批处理
    * - 特点
      - 数据的管理者
      - 用户 (程序员)
      - 文件系统
      - 数据库管理系统
    * - 
      - 数据面向的对象
      - 某一应用程序 (一一对应)
      - 某一应用
      - 现实世界
    * - 
      - 数据的共享程度
      - 无共享, 冗余度极大
      - 共享性差, 冗余度大
      - 共享性好, 冗余度小
    * -
      - 数据的独立性
      - 不独立, 完全依赖与程序
      - 独立性差
      - 具有高度的物理独立性 (应用程序与数据的物理存储相互独立) 和一定的逻辑独立性 (应用程序与数据的逻辑结构相互独立)
    * -
      - 数据的结构化
      - 无结构
      - 记录内有结构, 整体无结构
      - 整体结构化, 用数据模型描述
    * - 
      - 数据控制能力
      - 应用程序自己控制
      - 应用程序自己控制
      - 由数据库管理系统提供数据安全性 (security), 完整性 (integrity), 并发 (concurrency) 控制和恢复 (recovery) 能力

数据模型 Data Model
~~~~~~~~~~~~~~~~~~~~~~~~

|  数据模型是对现实世界数据特征的抽象, 用于描述, 组织和操作数据
|  数据模型是数据库系统的核心和基础

目的不同的两类模型
^^^^^^^^^^^^^^^^^^^^^^

现实 → 人的抽象 → 机器的抽象

1. 概念模型 Conceptual model
    也称信息模型, 以用户的视点来对数据和信息建模, 主要用于数据库设计

    一些基本概念
        - 实体 entity
        - 属性 attribute
        - 码 key
        - 实体型 entity type
        - 实体集 entity set
        - 联系 relationship
    实体-联系方法 Entity-Relationship approach
        使用 E-R 图来描述模型

2. 逻辑模型和物理模型
    逻辑模型是以计算机的视点对数据建模, 主要用于数据库管理系统的实现
    物理模型是对数据最底层的抽象, 描述了数据在系统内部的表示方式和存取方法, 面向计算机系统

数据模型的组成要素
^^^^^^^^^^^^^^^^^^^^^^^^^

数据结构
    描述了数据库的组成对象及对象间的联系, 描述了系统的静态特性

    数据结构是数据模型最重要的方面, 因此在数据库系统中, 通常按照数据结构的类型来命名数据模型

数据操作
    对数据库中各种对象的实例允许执行的操作的集合 (包括操作及有关操作的规则)

    主要有查询和更新 (插入, 删除, 修改)

    描述了系统的动态特性

数据的完整性约束条件
    数据模型中的数据及其联系所具有的制约和依存规则

    用于保证数据的正确, 有效和相容

格式化模型
^^^^^^^^^^^^^^^^^

用记录表示实体, 实体的属性对应记录的数据项

数据结构的单位是 **基本层次联系**, 即两个记录及它们之间的一对多的联系

层次模型 Hierarchical Model
    用树 tree 来表示各类实体及实体间的联系 (也只能表示树形结构)

    .. figure:: imgs/Hierarchical_Model_example1.png
        :align: right
        :scale: 90 %

        数据模型例
    
    .. figure:: imgs/Hierarchical_Model_example2.png
        :align: right
        :scale: 80 %

        模型的一个实例       

    - 层次模型中的基本层次联系为:
    
        1. 有且只有一个 node 没有 parent node, 即根节点 root node 
        2. 根以外的其他 node 有且只有一个 parent node

    - 层次模型中每个节点都表示一个记录类型, 记录类型之间的联系用节点之间的有向线段表示 (这种联系是 parent-children 的一对多的联系, 而联系是唯一的)

    - 每个记录类型可以包括多个字段, 记录类型描述实体, 字段描述实体的属性

    - 查找任何记录都必须按其层次路径查询 (即找到 node 的所有 parents)

网状模型
    图 graph

    .. figure:: imgs/Net_Model_example1.png
        :align: right
        :scale: 80 %       

    - 网状模型中的基本层次联系为:
    
        1. 可以有多个 nodes 没有 parent node
        2. 每个 node 可以有多个 parent nodes

    - 网状模型中每个节点都表示一个记录类型, 记录类型之间的联系用节点之间的有向线段表示 (这种联系是 parent-children 的一对多的联系, 两个 nodes 间可以有多个联系)

    - 每个记录类型可以包括多个字段, 记录类型描述实体, 字段描述实体的属性


数据库系统的结构
~~~~~~~~~~~~~~~~~~~~

三级模式结构
^^^^^^^^^^^^^^^^

.. figure:: imgs/Three-schema_approach.png
    :align: right
    :scale: 80 %
   
模式 Schema
    - 数据模型是对实体及其关系的整体抽象定义; type-value
    - 而 schema 则是对数据库中所有实体及其所有关系的抽象的具体的代码实现; schema-instance (一个数据库只有一个模式)
    
    模式也称逻辑模式, 是数据库中全体数据的逻辑结构和特征的描述, 是所有用户的公共数据视图

    三级模式结构的中间层, 既不涉及数据的物理存储, 也不涉及数据的具体应用

    模式是数据库的中心与关键

外模式 External Schema
    也称子模式 (subschema) 或用户模式, 面向数据库的终端使用者和具体应用

    通常是 schema 的子集, 不同用户有不同权限, 可以保证数据库安全

内模式 Internal Schema
    也称存储模式 (storage schema), 一个数据库只有一个内模式

    定义了数据的物理结构和存储方式

二级映像功能与数据独立性
    1. 外模式/模式映像
        反映了模式描述的数据全局逻辑结构的局部

        模式改变时, 只需改变映像就可以使外模式保持不变, 即可不用修改应用程序, 实现了数据的逻辑独立性

    2. 模式/内模式映像
        反映了模式定义的数据全局逻辑结构与存储结构之间的对应关系

        存储结构改变时, 只需改变映像就可以保持模式不变, 实现了数据的物理独立性


数据库系统的组成
~~~~~~~~~~~~~~~~

iiiiiiiiiiiiiiiiiiii
iiiiiiiiiiiiiiiiii
iiiiiiiiiiiiiiiiiiiiii
iiiiiiiiiiiiiiiiiii
iiiiiiiiiiiiiiiiiii
iiiiiiiiiiiiiiiiiii
iiiiiiiiiiiiiiiiii